<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" creationComplete="init();">
	<mx:Script>
		<![CDATA[
			import util.AlertManager;
			import mx.collections.ArrayCollection;
			import events.AdicionarTransacaoEvent;
			import events.CadastrarContaEvent;
			import mx.events.MenuEvent;
			import util.AuthEntity;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import remote.RemoteFacade;
			import events.DoLogoutEvent;
			
			private static const ADD_CONTA:String = "Adicionar Conta";
			private static const REMOVE_CONTA:String = "Remover Conta";			
			private static const ADD_TRANSACAO:String = "Adicionar Transação";
			private static const REMOVE_TRANSACAO:String = "Remover Transação";			
			private static const AGENDAR_TRANSACAO:String = "Agendar Transação";
			private static const RELATORIO:String = "Gerar Relatório";			
			private static const IMPORTAR:String = "Importar Extrato";
			private static const EXPORTAR:String = "Exportar Extrato";
			
			private var accountsIds:ArrayCollection;
			
			[Bindable]
			private var accountsLabels:ArrayCollection;
			
			[Bindable]
			private var ultimasOps:ArrayCollection;
			
			private function init():void {				
				carregaAccountsIds();
				
				// utilizado pelo Selenium
				ExternalInterface.addCallback("addConta", addConta);
			}	
			
			public function carregaAccountsIds():void {
				var login:String = AuthEntity.getInstance().login;
				RemoteFacade.getInstance().getAllAccountsIds(login, accountsIdsHandler, defaultFaultHandler);
				
			}
			
			private function accountsIdsHandler(e:ResultEvent):void {
				accountsIds = e.result as ArrayCollection;
				atualizaAccId();		
				carregaAccountsLabels();
			}
			
			private function defaultFaultHandler(e:FaultEvent):void {
				AlertManager.showError(e);
			}
			
			private function carregaAccountsLabels():void {
				var login:String = AuthEntity.getInstance().login;
				accountsLabels = new ArrayCollection();
				for (var i:int = 0; i < accountsIds.length; i++) {
					RemoteFacade.getInstance().getAccountLabel(login, accountsIds[i], accountLabelHandler, defaultFaultHandler);
				}
			}
			
			private function accountLabelHandler(e:ResultEvent):void {
				accountsLabels.addItem(e.result as String);
			}
			
			private function atualizaAccId():void {
				if (accountsIds.length > 0) {
					var index:int = accountsList.selectedIndex;
					AuthEntity.getInstance().accId = accountsIds.getItemAt(index) as Number;
					atualizaUltimasOps();
				}
			}
			
			private function atualizaUltimasOps():void {
				ultimasOps = new ArrayCollection();
				if (accountsIds.length > 0) {
					var accId:Number = AuthEntity.getInstance().accId;
					var login:String = AuthEntity.getInstance().login;
					RemoteFacade.getInstance().getAllOperations(login, accId, getOperationsCallBack, defaultFaultHandler);
				}
			}
			
			private function getOperationsCallBack(e:ResultEvent):void {
				this.ultimasOps = e.result as ArrayCollection;
			}
			
			private function getPeriodos(mesInicial:int, anoInicial:int, mesFinal:int, anoFinal:int):ArrayCollection {
				var meses:Array = ["", "Jan", "Fev", "Mar", "Abril", "Maio"];
				var anos:Array = ["07", "08", "09"];
				var periodos:ArrayCollection = new ArrayCollection;
				
				while (mesInicial <= mesFinal && anoInicial <= anoFinal) {
					periodos.addItem(meses[mesInicial] + "/" + anoInicial);					
					mesInicial += 1 % 12;
					if (mesInicial == 0) anoInicial++;	
				}
				
				return periodos;
			}			
			
			private function logout():void {				
				limparTudo();
				RemoteFacade.getInstance().doLogout(AuthEntity.getInstance().login, AuthEntity.getInstance().senha, callBackLogout, callBackFault);
			}
			private function limparTudo():void {
				accountsLabels = new ArrayCollection();
				ultimasOps = new ArrayCollection();
				accountsIds = new ArrayCollection();
			}
			
			private function callBackLogout(e:ResultEvent):void {
				dispatchEvent(new DoLogoutEvent(DoLogoutEvent.LOGOUT));
			}

			private function callBackFault(e:FaultEvent):void {
				AlertManager.showError(e);
			}
			
			private function itemClickHandler(e:MenuEvent):void {
				if (e.label == ADD_CONTA) {
					addConta();
				} else if (e.label == REMOVE_CONTA) {
					removeConta();
				} else if (e.label == ADD_TRANSACAO) {
					addTransacao();
				} else if (e.label == REMOVE_TRANSACAO) {
					removeTransacao();
				} else if (e.label == AGENDAR_TRANSACAO) {
					agendarTransacao();
				} else if (e.label == RELATORIO) {
					gerarRelatorio();
				}  else if (e.label == IMPORTAR) {
					importar();
				} else if (e.label == EXPORTAR) {
					exportar();
				}
			}
			
			private function addConta():void {
				dispatchEvent(new CadastrarContaEvent(CadastrarContaEvent.CADASTRAR));
			}
			
			private function removeConta():void {
				if (accountsIds.length > 0) {
					var accountIndex:int = accountsList.selectedIndex;
					var login:String = AuthEntity.getInstance().login;
					RemoteFacade.getInstance().removeAccount(login, accountsIds.getItemAt(accountIndex) as Number, removerContaHandler, defaultFaultHandler); 
				}
			}
			
			private function removerContaHandler(e:ResultEvent):void {
				carregaAccountsIds();
			}
			
			private function defulatFaultHandler(e:FaultEvent):void {
				AlertManager.showError(e);
			}
			
			private function addTransacao():void {
				dispatchEvent(new AdicionarTransacaoEvent(AdicionarTransacaoEvent.ADICIONAR));
			}
			
			private function removeTransacao():void {
			}
			
			private function agendarTransacao():void {
			}
			
			private function gerarRelatorio():void {
			}
			
			private function importar():void {
			}
			
			private function exportar():void {
			}

		]]>
	</mx:Script>
	<mx:Array id="contas">
		<mx:String>Conta Padrão</mx:String>
		<mx:String>Banco do Brasil</mx:String>
	</mx:Array>
	<mx:XMLList id="menu">
        <menuitem label="Conta" data="Conta">
        	<menuitem label="{ADD_CONTA}" data="{ADD_CONTA}"/>
        	<menuitem label="{REMOVE_CONTA}" data="{REMOVE_CONTA}"/>        	
        </menuitem>               
        <menuitem label="Transação" data="Transação">
        	<menuitem label="{ADD_TRANSACAO}" data="{ADD_TRANSACAO}"/>
        	<menuitem label="{REMOVE_TRANSACAO}" data="{REMOVE_TRANSACAO}"/>
        	<menuitem label="{AGENDAR_TRANSACAO}" data="{AGENDAR_TRANSACAO}"/>
        </menuitem>                                   
        <menuitem label="Extratos" data="Extratos">
        	<menuitem label="{RELATORIO}" data="{RELATORIO}"/>
        	<menuitem label="{IMPORTAR}" data="{IMPORTAR}"/>
        	<menuitem label="{EXPORTAR}" data="{EXPORTAR}"/>
        </menuitem>        
        
    </mx:XMLList>
	 <mx:HBox width="100%" height="100%">
	 	<mx:VBox height="100%">
		 	 <mx:Label text="MyMoney" fontSize="16" color="#CDEFC8" fontWeight="bold" letterSpacing="1" paddingTop="5"/>
			<mx:Panel title="Contas" height="100%">			
				<mx:List id="accountsList" dataProvider="{accountsLabels}" width="100%" height="100%" selectedIndex="0" change="{atualizaAccId();}"/>		
			</mx:Panel>
	 	</mx:VBox>
	 	<mx:VBox width="100%" height="100%">
	 		<mx:HBox width="100%">
			 	 <mx:ApplicationControlBar id="dockedBar" dock="true" height="100%" width="100%">
			 	 	<mx:MenuBar height="100%" width="100%" dataProvider="{menu}" labelField="@label" itemClick="itemClickHandler(event);"/>
			 	 </mx:ApplicationControlBar>
			 	 <mx:Spacer width="30"/>
			 	 <mx:LinkButton label="Logout" id="logoutButtonHome" click="logout();"/>			
	 		</mx:HBox>
			<mx:Panel title="Movimentação Financeira" width="100%" height="100%">
				<mx:VBox>
					<mx:DataGrid dataProvider="{ultimasOps}" width="100%" height="100%">
				      <mx:columns>
				         <mx:DataGridColumn dataField="way"/>
				         <mx:DataGridColumn dataField="amount"/>
				         <mx:DataGridColumn dataField="type"/>
				         <mx:DataGridColumn dataField="date"/>
				      </mx:columns>
					</mx:DataGrid>		
					<mx:VBox width="100%">
						<mx:Label text="Período:"/>
						<mx:HBox width="100%">
							<mx:Spacer width="70"/>										
							<mx:HBox width="100%">
								<mx:ComboBox dataProvider="{getPeriodos(1,9,5,9)}"/>
								<mx:Button label="Novo Extrato"/>
							</mx:HBox>
						</mx:HBox>	
					</mx:VBox>
				</mx:VBox>
			</mx:Panel>		
	 	</mx:VBox>	 	 
	 </mx:HBox>
	<mx:HBox>
	</mx:HBox>
</mx:VBox>
